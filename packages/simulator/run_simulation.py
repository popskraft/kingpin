#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä–æ–≤—ã—Ö —Å–∏–º—É–ª—è—Ü–∏–π Kingpin
"""

import os
import sys
import argparse
from game_simulator import GameSimulator

def main():
    parser = argparse.ArgumentParser(description='Kingpin Game Simulator')
    parser.add_argument('--mode', choices=['matchup', 'tournament'], default='tournament',
                       help='–†–µ–∂–∏–º —Å–∏–º—É–ª—è—Ü–∏–∏: matchup (–æ–¥–∏–Ω –º–∞—Ç—á–∞–ø) –∏–ª–∏ tournament (–ø–æ–ª–Ω—ã–π —Ç—É—Ä–Ω–∏—Ä)')
    parser.add_argument('--caste1', choices=['gangsters', 'authorities', 'loners', 'solo'],
                       help='–ü–µ—Ä–≤–∞—è –∫–∞—Å—Ç–∞ –¥–ª—è —Ä–µ–∂–∏–º–∞ matchup')
    parser.add_argument('--caste2', choices=['gangsters', 'authorities', 'loners', 'solo'],
                       help='–í—Ç–æ—Ä–∞—è –∫–∞—Å—Ç–∞ –¥–ª—è —Ä–µ–∂–∏–º–∞ matchup')
    parser.add_argument('--games', type=int, default=100,
                       help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä –Ω–∞ –º–∞—Ç—á–∞–ø (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 100)')
    parser.add_argument('--output', type=str,
                       help='–§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: simulation_report.md)')
    
    args = parser.parse_args()
    
    # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –∫–∞—Ä—Ç–∞–º–∏
    cards_file = os.path.join(os.path.dirname(__file__), '..', '..', 'config', 'cards.csv')
    
    if not os.path.exists(cards_file):
        print(f"–û—à–∏–±–∫–∞: —Ñ–∞–π–ª {cards_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        sys.exit(1)
    
    print("üéÆ –ó–∞–ø—É—Å–∫ –∏–≥—Ä–æ–≤–æ–≥–æ —Å–∏–º—É–ª—è—Ç–æ—Ä–∞ Kingpin...")
    print(f"üìÅ –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ä—Ç—ã –∏–∑: {cards_file}")
    
    # –°–æ–∑–¥–∞–µ–º —Å–∏–º—É–ª—è—Ç–æ—Ä
    simulator = GameSimulator(cards_file)
    
    if args.mode == 'matchup':
        if not args.caste1 or not args.caste2:
            print("–û—à–∏–±–∫–∞: –¥–ª—è —Ä–µ–∂–∏–º–∞ matchup –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å --caste1 –∏ --caste2")
            sys.exit(1)
        
        print(f"‚öîÔ∏è –°–∏–º—É–ª–∏—Ä—É–µ–º –º–∞—Ç—á–∞–ø: {args.caste1.upper()} vs {args.caste2.upper()}")
        print(f"üé≤ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä: {args.games}")
        
        result = simulator.run_matchup_simulation(args.caste1, args.caste2, args.games)
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ú–ê–¢–ß–ê–ü–ê:")
        print(f"üèÜ {args.caste1.upper()}: {result['win_rates'][args.caste1]:.1f}% ({result['wins'][args.caste1]} –ø–æ–±–µ–¥)")
        print(f"üèÜ {args.caste2.upper()}: {result['win_rates'][args.caste2]:.1f}% ({result['wins'][args.caste2]} –ø–æ–±–µ–¥)")
        print(f"ü§ù –ù–∏—á—å–∏: {result['win_rates']['Draw']:.1f}% ({result['wins']['Draw']})")
        print(f"‚è±Ô∏è –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ –∏–≥—Ä—ã: {result['avg_game_length']:.1f} —Ö–æ–¥–æ–≤")
        
        # –ü—Ä–æ—Å—Ç–æ–π –æ—Ç—á–µ—Ç –¥–ª—è –æ–¥–Ω–æ–≥–æ –º–∞—Ç—á–∞–ø–∞
        report = f"# –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∞—Ç—á–∞–ø–∞ {args.caste1.upper()} vs {args.caste2.upper()}\n\n"
        report += f"**–ò–≥—Ä —Å—ã–≥—Ä–∞–Ω–æ:** {args.games}\n\n"
        report += f"## –†–µ–∑—É–ª—å—Ç–∞—Ç—ã\n"
        report += f"- **{args.caste1.upper()}**: {result['win_rates'][args.caste1]:.1f}% ({result['wins'][args.caste1]} –ø–æ–±–µ–¥)\n"
        report += f"- **{args.caste2.upper()}**: {result['win_rates'][args.caste2]:.1f}% ({result['wins'][args.caste2]} –ø–æ–±–µ–¥)\n"
        report += f"- **–ù–∏—á—å–∏**: {result['win_rates']['Draw']:.1f}% ({result['wins']['Draw']})\n\n"
        report += f"**–°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ –∏–≥—Ä—ã:** {result['avg_game_length']:.1f} —Ö–æ–¥–æ–≤\n"
        
    else:  # tournament mode
        print(f"üèüÔ∏è –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞ –º–µ–∂–¥—É –≤—Å–µ–º–∏ –∫–∞—Å—Ç–∞–º–∏")
        print(f"üé≤ –ò–≥—Ä –Ω–∞ –º–∞—Ç—á–∞–ø: {args.games}")
        print("‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...")
        
        tournament_data = simulator.run_full_tournament(args.games)
        
        # –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Ç–∫–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print(f"\nüèÜ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–£–†–ù–ò–†–ê:")
        caste_stats = tournament_data['caste_statistics']
        sorted_castes = sorted(caste_stats.items(), key=lambda x: x[1]['win_rate'], reverse=True)
        
        for i, (caste, stats) in enumerate(sorted_castes, 1):
            print(f"{i}. {caste.upper()}: {stats['win_rate']:.1f}% –≤–∏–Ω—Ä–µ–π—Ç ({stats['wins']}/{stats['games']})")
        
        print(f"\nüìà –í—Å–µ–≥–æ –∏–≥—Ä: {tournament_data['total_games']}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç
        report = simulator.generate_simulation_report(tournament_data)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
    if args.output:
        report_file = args.output
    else:
        if args.mode == 'matchup':
            report_file = f"matchup_{args.caste1}_vs_{args.caste2}_report.md"
        else:
            report_file = "tournament_simulation_report.md"
    
    report_path = os.path.join(os.path.dirname(__file__), '..', '..', 'docs', report_file)
    
    with open(report_path, 'w', encoding='utf-8') as f:
        f.write(report)
    
    print(f"\n‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {report_path}")
    
    # –ê–Ω–∞–ª–∏–∑ –±–∞–ª–∞–Ω—Å–∞
    if args.mode == 'tournament':
        win_rates = [stats['win_rate'] for stats in caste_stats.values()]
        balance_gap = max(win_rates) - min(win_rates)
        
        print(f"\n‚öñÔ∏è –ê–ù–ê–õ–ò–ó –ë–ê–õ–ê–ù–°–ê:")
        print(f"–†–∞–∑—Ä—ã–≤ –≤ –≤–∏–Ω—Ä–µ–π—Ç–∞—Ö: {balance_gap:.1f}%")
        
        if balance_gap > 20:
            print("‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –î–ò–°–ë–ê–õ–ê–ù–° - —Ç—Ä–µ–±—É–µ—Ç—Å—è —Å–µ—Ä—å–µ–∑–Ω–∞—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞")
        elif balance_gap > 10:
            print("‚ö° –£–ú–ï–†–ï–ù–ù–´–ô –î–ò–°–ë–ê–õ–ê–ù–° - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞")
        else:
            print("‚úÖ –•–û–†–û–®–ò–ô –ë–ê–õ–ê–ù–° - –∫–∞—Å—Ç—ã –ø—Ä–∏–º–µ—Ä–Ω–æ —Ä–∞–≤–Ω—ã –ø–æ —Å–∏–ª–µ")

if __name__ == "__main__":
    main()
